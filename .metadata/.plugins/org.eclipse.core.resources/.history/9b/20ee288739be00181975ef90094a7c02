package com.jiayang.portlet.extend;

import java.io.IOException;

import javax.portlet.PortletException;
import javax.portlet.RenderRequest;
import javax.portlet.RenderResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.jiayang.portlet.commons.ModelAndView;
import com.jiayang.portlet.freemarker.FreemarkerConfig;
import com.liferay.util.bridges.mvc.MVCPortlet;

import freemarker.template.Template;
import freemarker.template.TemplateException;

public class MVCFreeMarkerPortlet extends MVCPortlet {
    private static Logger mvcFreeMarkerPortletLogger =LoggerFactory.getLogger(MVCFreeMarkerPortlet.class);
	@Override
	public void doView(RenderRequest renderRequest, RenderResponse renderResponse) {
		// TODO Auto-generated method stub
		ModelAndView modelAndView=showView(renderRequest, renderResponse);
		if(modelAndView==null) {
			mvcFreeMarkerPortletLogger.debug("对不起编程必须重写showView方法并且不能为null");
			throw new RuntimeException("对不起编程必须重写showView方法并且不能为null");
		}
		if(modelAndView.getModel().isEmpty())
		{
			Template template=FreemarkerConfig.configuration.getTemplate(modelAndView.getView());
			try {
				template.process(renderRequest,renderResponse.getWriter());
			} catch (TemplateException e) {
				// TODO Auto-generated catch block
				mvcFreeMarkerPortletLogger.error("模板解析错误！！！！");
				e.printStackTrace();
			}
		}
		else {
		Template template=FreemarkerConfig.configuration.getTemplate(modelAndView.getView());
		try {
			template.process(modelAndView.getModel(),renderResponse.getWriter());
		} catch (TemplateException e) {
			// TODO Auto-generated catch block
			mvcFreeMarkerPortletLogger.error("模板解析错误！！！！");
			e.printStackTrace();
		}
		
		}
		
		
	}

	protected ModelAndView showView(RenderRequest renderRequest, RenderResponse renderResponse) {
		
		return null;
	}
	
	

}
